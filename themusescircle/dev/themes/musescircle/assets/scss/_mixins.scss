// Also includes functions in addition to mixins

// Arrow buttons
@mixin arrow-buttons {
	@include sizing(40px, 40px);
	border-radius: 100%;
	background: $color-06;
	padding: 10px;
	text-align: center;
	.icon {
		font-size: rem(18px);
		@include transition(color 0.3s ease-in-out);			
	}
	&:hover .icon {
		color: $color-05;
	}	
}

// Clearfix
@mixin clearfix($selector) {
	#{$selector}:before, #{$selector}:after {
		content: "";
		display: table;
		zoom: 1;
	}
	#{$selector}:after {
		clear: both;
	}
}

// Countdown styles
@mixin countdown($element, $size) {
	@if $element == label {	
		@if $size == small {
			font-size: rem(25px);
		} @else {
			font-size: rem(30px);
		}
	} @else if $element == value {
		@if $size == small {
			@include sizing(50px, 50px);
			font-size: rem(14px);
			line-height: 44px;
			border: 3px solid $color-06;
		} @else {
			@include sizing(75px, 75px);
			font-size: rem(20px);
			line-height: 65px;
			border: 5px solid $color-06;
		}		
	}	
}

// PX to EM conversion
// From https://css-tricks.com/snippets/sass/px-to-em-functions
@function em($pixels, $context: $base-font-size) {
	@if (unitless($pixels)) {
		$pixels: $pixels * 1px;
	}

	@if (unitless($context)) {
		$context: $context * 1px;
	}

	@return $pixels / $context * 1em;
}

// PX to REM conversion
// Modified from https://css-tricks.com/snippets/sass/px-to-em-functions
@function rem($pixels, $context: $base-font-size) {
	@if (unitless($pixels)) {
		$pixels: $pixels * 1px;
	}

	@if (unitless($context)) {
		$context: $context * 1px;
	}

	@return $pixels / $context * 1rem;
}

// Set flex flow property
// flex: grow - shrink - basis
@mixin flex($type: '') {
	@if $type == grow {
		flex: 1 0 auto; 
	} @else if $type == base {
		flex: 1 1 0%; 
	} @else if $type == full {
		flex: 1 1 100%;
	} @else if $type == max {
		flex: 0 0 auto;
	} @else {
		flex: 0 1 auto; 
	}
}

// Flex flow
@mixin flex-flow($flow) {
	display: flex;
	flex-flow: $flow;
}

// Flex flow inline 
@mixin flex-flow-inline($flow) {
	display: inline-flex;
	flex-flow: $flow;
}

// Responsive reset for flex
@mixin flex-reset($selector) {
	display: block;
	#{$selector} {
		width: auto;
	}
}

// Calculation for gallery columns
@mixin gallery-columns($columns, $responsive: '') {
	max-width: ((170 * $columns) * 1px);
	figure {
		@if $responsive == '' {	
			@include flex;
		}
		width: ((100 / $columns) * 1%);
	}	
}

// For stone-like muses background
@mixin muses-bg($border: '') {
	background: url($images + 'muses-bg.png') 0 0 repeat;
	background-attachment: fixed;
	@if $border == true {	
		border: 1px solid $color-05;	
	}	
}

// Muses icons
@mixin muses-icons($fs: '') {
	@if $fs != '' {	
		font-size: rem($fs);		
	} @else {
		font-size: rem(16px);
	}
    font-family: 'Muses Icons' !important;
    speak: none;    
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    text-transform: none;
    line-height: 1;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    @include inline-block(middle); 	
}

// Inline block
@mixin inline-block($vertical-align) {
	display: inline-block;
	vertical-align: $vertical-align;
}

// Placeholder 
// Examples: @include placeholder {}, :focus{@include placeholder {}}, or input {@include placeholder {}}
@mixin placeholder {
	&::-webkit-input-placeholder {@content}
	&:-moz-placeholder           {@content}
	&::-moz-placeholder          {@content}
	&:-ms-input-placeholder      {@content}  
}

// Responsive max-width media query
@mixin respond($breakpoint) {
	@media only screen and (max-width: $breakpoint) {
		@content;
	}
}

// Signature styles
@mixin signature($element, $size) {
	@if $element == wrapper {	
		@if $size == small {
			height: 125px;
		} @else {
			height: 175px;
		}
	} @else if $element == greeting {
		@if $size == small {
			font-size: rem(35px);
		} @else {
			font-size: rem(40px);
		}		
	} @else if $element == name {
		@if $size == small {
			font-size: rem(75px);
		} @else {
			font-size: rem(125px);
		}		
	}	
}

// Sizing for elements
@mixin sizing($width, $height) {
	width: $width;
	height: $height;
}

// Transition
@mixin transition($value) {
	-webkit-transition: $value;	
	-moz-transition: $value;	
	-o-transition: $value;	
	transition: $value;
}